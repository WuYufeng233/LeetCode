Problem Description：
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].



My Solution: 

/** 法一
  *time complexity: O(n^2)
  *(Brute method暴力破解法)
  */
#include<vector>

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> results;
        for(int i=0;i<nums.size()-1;i++)
        {
            for(int j=i+1;j<nums.size();++j)
            {
                if(nums[i]+nums[j]==target)
                {    
                    results.push_back(i);
                    results.push_back(j);
                    break;
            	}
        	}
    	}
        return results;
	}	
};

/** 法二
  * time complexity: O(nlogn+logn+n)=O(nlogn)
  * 先排序，后遍历排序后的数组，二分查找target与当前元素的差，再回原数组查找下标位置。
  */
#include<vector>
#include<algorithm> 
using namespace std;

class Solution {
public:
	vector<int> twoSum(vector<int>& nums, int target) {
		vector<int> copy = nums;
		vector<int> result;
		int length = nums.size();	
		int index;

		sort(copy.begin(), copy.end());
		for (int i = 0; i<length; i++) {
			int remainder = target - copy[i];
			
			if ((index = binarySearch(copy, i+1, length, remainder)) != -1) {
				// 找到存在的数后去原数组找下标
				for (int j = 0; j < length; j++) {
					if (nums[j] == copy[i]) {
						result.push_back(j);
						continue;
					}
					if (nums[j] == copy[index]) {
						result.push_back(j);
						continue;
					}
					if (result.size() == 2)
						break;
				}
				break;
			}
		}
		return result;
	}

	int binarySearch(vector<int>& nums, int first, int length, int key) {
		int low = first, high = length, middle = 0;
		while (low<high) {
			middle = (low + high) / 2;
			if (key == nums[middle]) {
				return middle;
			}
			else if (key<nums[middle]) {
				high = middle;
			}
			else if (key>nums[middle]) {
				low = middle + 1;
			}
		}
		return -1;
	}

};



Others' better solutions:
Accepted C++ O(n) Solution

//利用哈希表（Hash Table）
class Solution{
public:
vector<int> twoSum(vector<int> &numbers, int target)
{
    //Key is the number and value is its index in the vector.
	unordered_map<int, int> hash;
	vector<int> result;
	for (int i = 0; i < numbers.size(); i++) {
		int numberToFind = target - numbers[i];

            //if numberToFind is found in map, return them
		if (hash.find(numberToFind) != hash.end()) {
                    //+1 because indices are NOT zero based
			result.push_back(hash[numberToFind]);	//作者本来这里是返回下标加一的，我改为下标了
			result.push_back(i);			//作者本来这里是返回下标加一的，我改为下标了
			return result;
		}

            //number was not found. Put it in the map.
		hash[numbers[i]] = i;
	}
	return result;
}
};
